<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>Dang Jian</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>《Web前端开发最佳实践》- 勘误</title>
				<description>&lt;h2 id=&quot;section&quot;&gt;第1章&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;第六页第二段中“新发布的IE10浏览器”应该改为“新发布的IE11浏览器”&lt;/li&gt;
  &lt;li&gt;第九页最后一段中“HTML5是HTML和XHTML的最新标准，还没有发布最终版”，去掉“还没有发布最终版”。因为已经发布了HTML5的正式版。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第2章&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;第3章&lt;/h2&gt;

&lt;h2 id=&quot;section-3&quot;&gt;第4章&lt;/h2&gt;

&lt;h2 id=&quot;section-4&quot;&gt;第5章&lt;/h2&gt;

&lt;h2 id=&quot;section-5&quot;&gt;第6章&lt;/h2&gt;

&lt;h2 id=&quot;section-6&quot;&gt;第7章&lt;/h2&gt;

&lt;h2 id=&quot;section-7&quot;&gt;第8章&lt;/h2&gt;

&lt;h2 id=&quot;section-8&quot;&gt;第9章&lt;/h2&gt;

&lt;h2 id=&quot;section-9&quot;&gt;第10章&lt;/h2&gt;

&lt;h2 id=&quot;section-10&quot;&gt;第11章&lt;/h2&gt;

&lt;h2 id=&quot;section-11&quot;&gt;第12章&lt;/h2&gt;
</description>
				<pubDate>Thu, 15 Jan 2015 00:00:00 +0800</pubDate>
				<link>/book/2015/01/15/web-frontend-development-best-practices-correct.html</link>
				<guid isPermaLink="true">/book/2015/01/15/web-frontend-development-best-practices-correct.html</guid>
			</item>
		
			<item>
				<title>我们为什么要开发一个开源的企业网站？</title>
				<description>&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;今年七月份，我和几个小伙伴们合伙建立了一个开发团队，取名为&lt;strong&gt;西安瑞木信息技术有限公司&lt;/strong&gt;，英文名是&lt;strong&gt;eRealm&lt;/strong&gt;。团队专注于Web开发，并提供Web开发的咨询及架构搭建。业务开展如火如荼的同时，团队宣传就提上了日程，作为正规军总不能没有宣传阵地吧。所以迫切需要搭建公司网站出来。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;确定目标后我们就开始考虑如果构建一个公司企业网站。先是进行业内调查，看了看别人家的公司网站是怎么做的。总体来讲，国外网站的设计和使用的技术总能比国内高很大一截，国内很多公司，甚至是很多软件公司都不注重公司网站的构建，网站千篇一律，没有特色。很多公司网站都是使用Wordpress，然后自定义皮肤。也有一些设计类公司，网站页面做的很漂亮，设计也前卫，但是前端源代码写的一塌糊涂。我们起初的方案也是想使用Wordpress作为基础来设计公司网站，网站UI从已有开源的皮肤基础上修改。这样既能节省开发成本，又能体现独一无二。其实，刚开始也是这么做的，并且已经做出来了第一版了。只是实在是觉得和别人家的网站差别不大，太普通了，并且网站也没有任何体现我们专注于Web开发这一特质。权衡再三之后，决定从头开发一个企业网站出来，使用我们团队擅长的技术重新开发一个网站出来。决定前端使用&lt;strong&gt;AngularJS&lt;/strong&gt;和&lt;strong&gt;Bootstrap&lt;/strong&gt;构建，后端使用&lt;strong&gt;node.js&lt;/strong&gt;和&lt;strong&gt;Express&lt;/strong&gt;构建。经过一个多月的努力，我们的技术团队利用工作之余的时间终于完成的项目的第一版。下面将详细介绍这个项目的基础结构。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;项目整体介绍&lt;/h3&gt;
&lt;p&gt;技术上，项目前端使用&lt;strong&gt;AngularJS&lt;/strong&gt;和&lt;strong&gt;Bootstrap&lt;/strong&gt;，后端使用&lt;strong&gt;node.js&lt;/strong&gt;和&lt;strong&gt;Express&lt;/strong&gt;。网站自动化构建工具使用&lt;strong&gt;grunt&lt;/strong&gt;。网站整体应用了流行扁平化设计和响应式设计。当然，UI设计是我们团队的弱项，所以很多都是借鉴（~~抄袭~~）了别人的设计。网站前端代码基于&lt;strong&gt;HTML5&lt;/strong&gt;，支持Chrome、Safari、Firefox及IE9+，使用IE8浏览器打开网站会自动跳转到引导用户下载现代浏览器的页面中。网站应用了&lt;strong&gt;响应式设计&lt;/strong&gt;，所以在智能手机上也可以愉快地浏览。&lt;/p&gt;

&lt;p&gt;项目是完全开源的，&lt;strong&gt;github&lt;/strong&gt;上的地址是&lt;a href=&quot;https://github.com/erealm/HomeSite&quot;&gt;eRealm&lt;/a&gt;，项目演示地址，也是我们公司的主页&lt;a href=&quot;http://www.erealm.cn&quot;&gt;eRealm Info &amp;amp; Tech&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;代码结构介绍&lt;/h3&gt;
&lt;p&gt;推荐使用&lt;strong&gt;Webstorm&lt;/strong&gt;打开项目。打开项目后，代码结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SjV97nF.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在主体结构中从上到下介绍。&lt;strong&gt;app&lt;/strong&gt;文件夹包含了所有后端代码；&lt;strong&gt;build&lt;/strong&gt;文件夹中包含了最新数据库备份；&lt;strong&gt;config&lt;/strong&gt;包含有网站整体的配置；&lt;strong&gt;logs&lt;/strong&gt;文件夹包含网站后端记录的日志文件；&lt;strong&gt;node_modules&lt;/strong&gt;是包含所有的&lt;strong&gt;node.js&lt;/strong&gt;依赖包（源代码中初始没有此文件夹，运行&lt;code&gt;npm install&lt;/code&gt;命令后所有加载的依赖包放置在此文件夹中）；&lt;strong&gt;public&lt;/strong&gt;文件夹包含了所有的前端代码，包括JavaScript、less、图片、Webfont等；&lt;strong&gt;.bowerrc&lt;/strong&gt;中定义了&lt;a href=&quot;http://bower.io/&quot;&gt;&lt;strong&gt;bower&lt;/strong&gt;&lt;/a&gt;管理前端库的下载地址；&lt;strong&gt;bower.json&lt;/strong&gt;则配置了项目需要的前端库；&lt;strong&gt;.jshintre-client&lt;/strong&gt;和&lt;strong&gt;.jshintrc-server&lt;/strong&gt;分别为前后端JavaScript代码规范检查规则；&lt;strong&gt;.travis.yml&lt;/strong&gt;为[travis]（https://travis-ci.org/）自动编译配置；&lt;strong&gt;app.js&lt;/strong&gt;为node.js启动脚本文件；&lt;strong&gt;build.sh&lt;/strong&gt;为单独编写的自动发布bash命令；gruntfile.js为&lt;a href=&quot;http://gruntjs.com&quot;&gt;&lt;strong&gt;grunt&lt;/strong&gt;&lt;/a&gt;配置文件；newrelic.js为&lt;a href=&quot;http://newrelic.com&quot;&gt;&lt;strong&gt;newrelic&lt;/strong&gt;&lt;/a&gt;的配置文件，用于监控网站性能；&lt;strong&gt;package.json&lt;/strong&gt;包含了所有node.js依赖包配置。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;项目后端结构介绍&lt;/h3&gt;
&lt;p&gt;项目后端代码架构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PMMGvUy.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要分为两大部分：&lt;strong&gt;app&lt;/strong&gt;和&lt;strong&gt;config&lt;/strong&gt;。&lt;strong&gt;app&lt;/strong&gt;里面按照职责不同来分类，每个脚本文件对应于不同的模块；&lt;strong&gt;api&lt;/strong&gt;文件夹包含了所有api对应的业务逻辑代码，&lt;strong&gt;helper&lt;/strong&gt;放置一些公用方法，如邮件发送、日志记录、数据库连接等等；&lt;strong&gt;templates&lt;/strong&gt;放置的是静态邮件模板；&lt;strong&gt;views&lt;/strong&gt;是后端页面模板，使用了&lt;strong&gt;handlebar&lt;/strong&gt;模板引擎，其中&lt;strong&gt;http&lt;/strong&gt;中放置系统错误显示页面，&lt;strong&gt;layouts&lt;/strong&gt;放置模板页；&lt;strong&gt;routes&lt;/strong&gt;是&lt;strong&gt;express&lt;/strong&gt;对应的路由配置，所有的页面和API的路由配置都在这个文件中。&lt;strong&gt;config&lt;/strong&gt;文件夹中为系统配置，按照不同环境分为开发和现场两个环境配置，&lt;strong&gt;all.js&lt;/strong&gt;放置共通配置，&lt;strong&gt;development.js&lt;/strong&gt;放置开发环境对应配置而&lt;strong&gt;production.js&lt;/strong&gt;放置线上环境配置。配置内容包括邮件发送、数据库连接及一些第三方API所需的key等等。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;项目前端结构介绍&lt;/h3&gt;
&lt;p&gt;项目前端代码结构如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/4WEeYLg.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前端代码全部放置于&lt;strong&gt;public&lt;/strong&gt;文件夹下。&lt;strong&gt;data&lt;/strong&gt;目录包含一些静态json格式数据，后期可能会考虑放到数据库中。&lt;strong&gt;helper&lt;/strong&gt;中是浏览器下载引导页面；&lt;strong&gt;images&lt;/strong&gt;包含了所有项目中用到的图片，我们尽量使用第三方的图片服务器保存图片，一些小图标也尽量使用webfont。&lt;strong&gt;JavaScripts&lt;/strong&gt;文件夹包含所有JavaScript文件，其中&lt;strong&gt;app&lt;/strong&gt;子目录放置业务代码，业务代码都是按照业务不同封装成了不同的&lt;strong&gt;angularjs&lt;/strong&gt; controller；&lt;strong&gt;debug&lt;/strong&gt;子目录放置调试用代码，而&lt;strong&gt;libs&lt;/strong&gt;方式前端JavaScript库，项目中使用得JavaScript库有&lt;strong&gt;angularjs&lt;/strong&gt;、&lt;strong&gt;jQuery&lt;/strong&gt;及一些插件；&lt;strong&gt;clients.js&lt;/strong&gt;是所有ajax请求函数；&lt;strong&gt;erealm.js&lt;/strong&gt;是angularjs的主模块；&lt;strong&gt;language.js&lt;/strong&gt;包含了所有多语言配置，目前支持中英文。&lt;strong&gt;stylesheets&lt;/strong&gt;包含了所有的css样式及webfont，除了第三方库之外，自定义的样式全部使用了&lt;strong&gt;less&lt;/strong&gt;。作为一种惯例，项目中添加了&lt;strong&gt;humans.txt&lt;/strong&gt;文件，表明项目的作者信息。有关humans.txt，可以参考官方网站&lt;a href=&quot;http://humanstxt.org&quot;&gt;humans.txt&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;自动化构建工具介绍&lt;/h3&gt;
&lt;p&gt;项目自动化构建使用&lt;strong&gt;grunt&lt;/strong&gt;。grunt的使用涉及开发、调试、发布阶段。开发阶段使用了图片压缩和前端代码格式美化，使用的工具是&lt;strong&gt;imagemin&lt;/strong&gt;和&lt;strong&gt;jsbeautifier&lt;/strong&gt;，运行&lt;code&gt;grunt prepare&lt;/code&gt;命令。调试阶段使用了代码规范检查、less编译、自动添加浏览器前缀、自动加载运行nodejs并打开浏览器、实时监控代码变化并刷新页面等。开发中，使用&lt;code&gt;grunt&lt;/code&gt;命令即可，为默认grunt命令。发布阶段包含了JavaScript及css合并压缩，并在文件路径上添加哈希值来避免浏览器缓存问题，同时删除开发环境中使用的代码，使用&lt;code&gt;grunt build&lt;/code&gt;命令即可把代码切换为发布环境。&lt;/p&gt;

&lt;p&gt;具体的使用grunt方法及相关工具的介绍，后期会有专门的技术文章讲解，这里不会详细设计技术细节。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;后期持续的改进点&lt;/h3&gt;
&lt;p&gt;项目完成的比较仓促，但是我们尽量保持代码的整洁和可维护性，一些编码方式也借鉴当前流行的最佳实践。但理想是美好的，现实总是不会做到那么完美，需要不断的完善。目前存在的问题是后端代码结构不够清晰、整体代码中无用代码还没有来得及移除。框架上期望把&lt;strong&gt;jQuery&lt;/strong&gt;去掉，只使用&lt;strong&gt;Angularjs&lt;/strong&gt;，目前只做到了尽量不用&lt;strong&gt;jQuery&lt;/strong&gt;中的方法。小图标的使用上&lt;strong&gt;Bootstrap&lt;/strong&gt;和
&lt;strong&gt;Font Awesome&lt;/strong&gt;重复，后期会逐步删除&lt;strong&gt;Font Awesome&lt;/strong&gt;而只使用&lt;strong&gt;Bootstrap&lt;/strong&gt;中带的小图标。目前，最大的问题是项目没有完整的自动化测试，这个后期会逐步添加。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;以上是这个开源项目的整体技术结构介绍。在这个项目中，我们会持续使用最流行的Web技术，希望得到大家的持续关注，如果有开发者能一块贡献一些代码，我们将会非常高兴。我们已经在github.io上构建了一个技术平台来发布Web技术文章，网址是blog.erealm.cn。博客网址也同样开源，使用了&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;构建。&lt;strong&gt;Jekyll&lt;/strong&gt;非常强大，最大的特点是使用markdown格式来发布文章。博客的代码在这里：&lt;a href=&quot;https://github.com/erealm/erealm.github.io&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我们做这个开源的项目的目的有两个，其一是通过这个项目来展示我们做Web项目的实力，及培养团队技术水平。其二是借助这个项目，能和同行们有个技术上的互动和交流。如果我们的项目能让一些新手们学到一些做Web项目的经验，我们就很知足了。技术是不断革新的，而国内Web技术向来是落后于国外好几年，这个是不争的事实。我们erealm团队乐意为国内Web贡献自己的力量，也欢迎国内同行们和我们交流Web开发经验。&lt;/p&gt;
</description>
				<pubDate>Sun, 02 Nov 2014 00:00:00 +0800</pubDate>
				<link>/font-end/home/2014/11/02/erealm-home-opensource-nodejs.html</link>
				<guid isPermaLink="true">/font-end/home/2014/11/02/erealm-home-opensource-nodejs.html</guid>
			</item>
		
	</channel>
</rss>
